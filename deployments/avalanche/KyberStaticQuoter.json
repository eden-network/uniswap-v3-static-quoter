{
  "address": "0xf98f0c2FCb709e918574BC50c15bE297c263a49a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "amountSpecified",
          "type": "int256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "quoteExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quoteExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2c9674cc088ed6f9f134041ae26f2be59ca74b1f084259245d08f2281fd89bf",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0xf98f0c2FCb709e918574BC50c15bE297c263a49a",
    "transactionIndex": 7,
    "gasUsed": "2159973",
    "logsBloom": "0x
    "blockHash": "0xa514ea9e2fa118ff5bffdab0a65b4d936e059c99f8fb9c3b33800faedf1eb89d",
    "transactionHash": "0xa2c9674cc088ed6f9f134041ae26f2be59ca74b1f084259245d08f2281fd89bf",
    "logs": [],
    "blockNumber": 30409174,
    "cumulativeGasUsed": "5315495",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC7a590291e07B9fe9E64b86c58fD8fC764308C4A"
  ],
  "numDeployments": 1,
  "solcInputHash": "f88b9557338c16a21d7d9c64e83a2769",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IUniswapV3StaticQuoter.QuoteExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KyberQuoter/KyberStaticQuoter.sol\":\"KyberStaticQuoter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x68629e5b1a30b6490c6ae721c28117f6f963745462b007da0769758eb67f10d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xb22c562b5175d50dbcc2224325666090d985f052abdcfe275c8dfc884e34de61\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IUniV3likeQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nstruct GlobalState {\\n    uint160 startPrice;\\n    int24 startTick;\\n    uint16 fee;\\n}\\n\\n// the top level state of the swap, the results of which are recorded in storage at the end\\nstruct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n}\\n\\nstruct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n}\\n\\ninterface IUniV3likeQuoterCore {\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external view returns (int256 amount0, int256 amount1);\\n\\n}\",\"keccak256\":\"0xd269f4631d3efa8658798ad07678df11843fe3f0e2045d85a7666c514fa0b943\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/KyberQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\n\\nimport './interfaces/IKyberQuoterCore.sol';\\nimport './interfaces/IKyberPool.sol';\\nimport './lib/SwapMath.sol';\\nimport './lib/SafeCast.sol';\\n\\n\\ncontract KyberQuoterCore {\\n    using SafeCast for uint256;\\n    using SafeCast for int128;\\n\\n    function quote(\\n        address poolAddress,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) public view returns (int256 amount0, int256 amount1) {\\n        require(amountSpecified != 0, 'amountSpecified cannot be zero');\\n\\n        SwapData memory swapData;\\n        swapData.specifiedAmount = amountSpecified;\\n        swapData.isToken0 = zeroForOne;\\n        swapData.isExactInput = swapData.specifiedAmount > 0;\\n        // tick (token1Qty/token0Qty) will increase for swapping from token1 to token0\\n        bool willUpTick = (swapData.isExactInput != zeroForOne);\\n        (\\n            swapData.baseL,\\n            swapData.reinvestL,\\n            swapData.sqrtP,\\n            swapData.currentTick,\\n            swapData.nextTick\\n        ) = getInitialSwapData(poolAddress, willUpTick);\\n        checkSqrtPriceLimitWithinAllowed(willUpTick, sqrtPriceLimitX96, swapData.sqrtP);\\n        uint24 swapFeeUnits = IKyberPool(poolAddress).swapFeeUnits();\\n\\n        // continue swapping while specified input/output isn't satisfied or price limit not reached\\n        while (swapData.specifiedAmount != 0 && swapData.sqrtP != sqrtPriceLimitX96) {\\n            int24 tempNextTick = getTempNextTick(swapData.currentTick, swapData.nextTick, willUpTick);\\n            swapData.nextSqrtP = TickMath.getSqrtRatioAtTick(tempNextTick);\\n            uint160 startSqrtP = swapData.sqrtP;\\n\\n            // local scope for targetSqrtP, usedAmount, returnedAmount and deltaL\\n            {\\n                uint160 targetSqrtP = swapData.nextSqrtP;\\n                // ensure next sqrtP (and its corresponding tick) does not exceed price limit\\n                if (willUpTick == (swapData.nextSqrtP > sqrtPriceLimitX96))\\n                    targetSqrtP = sqrtPriceLimitX96;\\n\\n                int256 usedAmount;\\n                int256 returnedAmount;\\n                uint256 deltaL;\\n                (usedAmount, returnedAmount, deltaL, swapData.sqrtP) = SwapMath.computeSwapStep(\\n                    swapData.baseL + swapData.reinvestL,\\n                    swapData.sqrtP,\\n                    targetSqrtP,\\n                    swapFeeUnits,\\n                    swapData.specifiedAmount,\\n                    swapData.isExactInput,\\n                    swapData.isToken0\\n                );\\n\\n                swapData.specifiedAmount -= usedAmount;\\n                swapData.returnedAmount += returnedAmount;\\n                swapData.reinvestL += deltaL.toUint128();\\n            }\\n\\n            if (swapData.sqrtP != swapData.nextSqrtP) {\\n                if (swapData.sqrtP != startSqrtP) {\\n                    // update the current tick data in case the sqrtP has changed\\n                    swapData.currentTick = TickMath.getTickAtSqrtRatio(swapData.sqrtP);\\n                }\\n                break;\\n            }\\n\\n            swapData.currentTick = willUpTick ? tempNextTick : tempNextTick - 1;\\n            // if tempNextTick is not next initialized tick\\n            if (tempNextTick != swapData.nextTick)\\n                continue;\\n            (swapData.baseL, swapData.nextTick) = _updateLiquidityAndCrossTick(\\n                poolAddress,\\n                swapData.nextTick,\\n                swapData.baseL,\\n                willUpTick\\n            );\\n        }\\n\\n        (amount0, amount1) = zeroForOne\\n            ? (amountSpecified - swapData.specifiedAmount, swapData.returnedAmount)\\n            : (swapData.returnedAmount, amountSpecified - swapData.specifiedAmount);\\n\\n    }\\n\\n    function getInitialSwapData(\\n        address poolAddress,\\n        bool willUpTick\\n    ) internal view returns (\\n        uint128 baseL,\\n        uint128 reinvestL,\\n        uint160 sqrtP,\\n        int24 currentTick,\\n        int24 nextTick\\n    ) {\\n        (sqrtP, currentTick, nextTick,) = IKyberPool(poolAddress).getPoolState();\\n        (baseL, reinvestL,) = IKyberPool(poolAddress).getLiquidityState();\\n        if (willUpTick)\\n            nextTick = getNextInitializedTick(poolAddress, nextTick);\\n    }\\n\\n    function checkSqrtPriceLimitWithinAllowed(\\n        bool willUpTick,\\n        uint160 sqrtPriceLimit, \\n        uint160 sqrtP\\n    ) internal pure {\\n        bool withinAllowed = willUpTick\\n            ? sqrtPriceLimit > sqrtP && sqrtPriceLimit < TickMath.MAX_SQRT_RATIO\\n            : sqrtPriceLimit < sqrtP && sqrtPriceLimit > TickMath.MIN_SQRT_RATIO;\\n        require(withinAllowed, 'sqrtPriceLimit out of bounds');\\n    }\\n\\n    function getTempNextTick(\\n        int24 currentTick, \\n        int24 nextTick, \\n        bool willUpTick\\n    ) internal pure returns (int24 tempNextTick) {\\n        // math calculations work with the assumption that the price diff is capped to 5%\\n        // since tick distance is uncapped between currentTick and nextTick\\n        // we use tempNextTick to satisfy our assumption with MAX_TICK_DISTANCE is set to be matched this condition\\n        tempNextTick = nextTick;\\n        if (willUpTick && tempNextTick > MAX_TICK_DISTANCE + currentTick)\\n            tempNextTick = currentTick + MAX_TICK_DISTANCE;\\n        else if (!willUpTick && tempNextTick < currentTick - MAX_TICK_DISTANCE)\\n            tempNextTick = currentTick - MAX_TICK_DISTANCE;\\n    }\\n\\n    /// @dev Update liquidity net data and do cross tick\\n    function _updateLiquidityAndCrossTick(\\n        address poolAddress,\\n        int24 nextTick,\\n        uint128 currentLiquidity,\\n        bool willUpTick\\n    ) internal view returns (uint128 newLiquidity, int24 newNextTick) {\\n        (,int128 liquidityNet,,) = IKyberPool(poolAddress).ticks(nextTick);\\n        if (willUpTick) {\\n            (,newNextTick) = IKyberPool(poolAddress).initializedTicks(nextTick);\\n        } else {\\n            (newNextTick,) = IKyberPool(poolAddress).initializedTicks(nextTick);\\n            liquidityNet = -liquidityNet;\\n        }\\n        newLiquidity = LiqDeltaMath.applyLiquidityDelta(\\n            currentLiquidity,\\n            liquidityNet >= 0 ? uint128(liquidityNet) : liquidityNet.revToUint128(),\\n            liquidityNet >= 0\\n        );\\n    }\\n\\n    function getNextInitializedTick(\\n        address poolAddress, \\n        int24 tick\\n    ) internal view returns (int24 next) {\\n        (,next) = IKyberPool(poolAddress).initializedTicks(tick);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x76fb51b88502553b573f9131e8042d5ada3424133f9219d5a3fa2e7eb7c095ab\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/KyberStaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol';\\nimport '@uniswap/v3-periphery/contracts/libraries/Path.sol';\\n\\nimport '../UniV3Quoter/interfaces/IUniswapV3StaticQuoter.sol';\\nimport './interfaces/IKyberFactory.sol';\\nimport './KyberQuoterCore.sol';\\n\\ncontract KyberStaticQuoter is IUniswapV3StaticQuoter, KyberQuoterCore {\\n    using SafeCast for uint256;\\n    using Path for bytes;\\n\\n    address immutable factory;\\n\\n    constructor(address _factory) {\\n        factory = _factory;\\n    }\\n\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) private view returns (address) {\\n        return IKyberFactory(factory).getPool(tokenA, tokenB, fee);\\n    }\\n\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        public\\n        view\\n        override\\n        returns (uint256 amountOut)\\n    {\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\n        address pool = getPool(params.tokenIn, params.tokenOut, params.fee);\\n        require(pool != address(0), 'Pool not found');\\n        (int256 amount0, int256 amount1) = quote(\\n            pool,\\n            zeroForOne,\\n            params.amountIn.toInt256(),\\n            params.sqrtPriceLimitX96 == 0\\n                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\\n                : params.sqrtPriceLimitX96\\n        );\\n\\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        public\\n        view\\n        override\\n        returns (uint256 amountOut)\\n    {\\n        uint256 i = 0;\\n        while (true) {\\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            uint256 _amountOut =\\n                quoteExactInputSingle(\\n                    QuoteExactInputSingleParams({\\n                        tokenIn: tokenIn,\\n                        tokenOut: tokenOut,\\n                        fee: fee,\\n                        amountIn: amountIn,\\n                        sqrtPriceLimitX96: 0\\n                    })\\n                );\\n\\n            amountIn = _amountOut;\\n            i++;\\n\\n            // decide whether to continue or terminate\\n            if (path.hasMultiplePools()) {\\n                path = path.skipToken();\\n            } else {\\n                return amountIn;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bbf87728483fa050a2d7d30f28bc5313f524e4b139c72bb2c86d35859bf377f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/interfaces/IKyberFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n\\ninterface IKyberFactory {\\n\\n    /// @notice Fetches the recipient of government fees\\n    /// and current government fee charged in fee units\\n    function feeConfiguration() external view returns (address _feeTo, uint24 _governmentFeeUnits);\\n    function getPool(address, address, uint24) external view returns (address);\\n}\",\"keccak256\":\"0x2eea1ba265118cf3061b0d60e31aa85bb896a40db61f54417b8fd75c3a564c33\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/interfaces/IKyberPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n\\ninterface IKyberPool {\\n\\n    /// @notice The fee to be charged for a swap in basis points\\n    /// @return The swap fee in basis points\\n    function swapFeeUnits() external view returns (uint24);\\n\\n    /// @notice The pool tick distance\\n    /// @dev Ticks can only be initialized and used at multiples of this value\\n    /// It remains an int24 to avoid casting even though it is >= 1.\\n    /// e.g: a tickDistance of 5 means ticks can be initialized every 5th tick, i.e., ..., -10, -5, 0, 5, 10, ...\\n    /// @return The tick distance\\n    function tickDistance() external view returns (int24);\\n\\n    /// @notice Fetches the pool's liquidity values\\n    /// @return baseL pool's base liquidity without reinvest liqudity\\n    /// @return reinvestL the liquidity is reinvested into the pool\\n    /// @return reinvestLLast last cached value of reinvestL, used for calculating reinvestment token qty\\n    function getLiquidityState()\\n        external\\n        view\\n        returns (\\n            uint128 baseL,\\n            uint128 reinvestL,\\n            uint128 reinvestLLast\\n        );\\n\\n    /// @notice Fetches the pool's prices, ticks and lock status\\n    /// @return sqrtP sqrt of current price: sqrt(token1/token0)\\n    /// @return currentTick pool's current tick\\n    /// @return nearestCurrentTick pool's nearest initialized tick that is <= currentTick\\n    /// @return locked true if pool is locked, false otherwise\\n    function getPoolState()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtP,\\n            int24 currentTick,\\n            int24 nearestCurrentTick,\\n            bool locked\\n        );\\n\\n    function factory() external view returns (address);\\n\\n    /// @return feeGrowthGlobal All-time fee growth per unit of liquidity of the pool\\n    function getFeeGrowthGlobal() external view returns (uint256);\\n\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside,\\n            uint128 secondsPerLiquidityOutside\\n        );\\n\\n    /// @notice Returns the previous and next initialized ticks of a specific tick\\n    /// @dev If specified tick is uninitialized, the returned values are zero.\\n    /// @param tick The tick to look up\\n    function initializedTicks(int24 tick) external view returns (int24 previous, int24 next);\\n\\n    function totalSupply() external view returns (uint256);\\n    function getSecondsPerLiquidityData() external view returns (uint128 secondsPerLiquidityGlobal, uint32 lastUpdateTime);\\n\\n}\",\"keccak256\":\"0x049e5665497ab4a91db64ec0c2d6c9c6fbebd082e417071cb34ca737ec7bcf31\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/interfaces/IKyberQuoterCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport { IUniV3likeQuoterCore } from '../../IUniV3likeQuoterCore.sol';\\n\\n// temporary swap variables, some of which will be used to update the pool state\\nstruct SwapData {\\n    int256 specifiedAmount; // the specified amount (could be tokenIn or tokenOut)\\n    int256 returnedAmount; // the opposite amout of sourceQty\\n    uint160 sqrtP; // current sqrt(price), multiplied by 2^96\\n    int24 currentTick; // the tick associated with the current price\\n    int24 nextTick; // the next initialized tick\\n    uint160 nextSqrtP; // the price of nextTick\\n    bool isToken0; // true if specifiedAmount is in token0, false if in token1\\n    bool isExactInput; // true = input qty, false = output qty\\n    uint128 baseL; // the cached base pool liquidity without reinvestment liquidity\\n    uint128 reinvestL; // the cached reinvestment liquidity\\n}\\n\\ninterface IKyberQuoterCore is IUniV3likeQuoterCore {}\",\"keccak256\":\"0x234b36683ffe9d3c68f8408559aa61ba5b579ac68d2a1f63d222177b371d6d06\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/lib/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\n/// @dev Code has been modified to be compatible with sol 0.8\\nlibrary FullMath {\\n  /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n  function mulDivFloor(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = a * b\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\n    // then use the Chinese Remainder Theorem to reconstruct\\n    // the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2**256 + prod0\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(a, b, not(0))\\n      prod0 := mul(a, b)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division\\n    if (prod1 == 0) {\\n      require(denominator > 0, '0 denom');\\n      assembly {\\n        result := div(prod0, denominator)\\n      }\\n      return result;\\n    }\\n\\n    // Make sure the result is less than 2**256.\\n    // Also prevents denominator == 0\\n    require(denominator > prod1, 'denom <= prod1');\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\n    // Compute remainder using mulmod\\n    uint256 remainder;\\n    assembly {\\n      remainder := mulmod(a, b, denominator)\\n    }\\n    // Subtract 256 bit number from 512 bit number\\n    assembly {\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator\\n    // Compute largest power of two divisor of denominator.\\n    // Always >= 1.\\n    uint256 twos = denominator & (~denominator + 1);\\n    // Divide denominator by power of two\\n    assembly {\\n      denominator := div(denominator, twos)\\n    }\\n\\n    // Divide [prod1 prod0] by the factors of two\\n    assembly {\\n      prod0 := div(prod0, twos)\\n    }\\n    // Shift in bits from prod1 into prod0. For this we need\\n    // to flip `twos` such that it is 2**256 / twos.\\n    // If twos is zero, then it becomes one\\n    assembly {\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2**256\\n    // Now that denominator is an odd number, it has an inverse\\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n    // Compute the inverse by starting with a seed that is correct\\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n    uint256 inv = (3 * denominator) ^ 2;\\n\\n    // Now use Newton-Raphson iteration to improve the precision.\\n    // Thanks to Hensel's lifting lemma, this also works in modular\\n    // arithmetic, doubling the correct bits in each step.\\n    inv *= 2 - denominator * inv; // inverse mod 2**8\\n    inv *= 2 - denominator * inv; // inverse mod 2**16\\n    inv *= 2 - denominator * inv; // inverse mod 2**32\\n    inv *= 2 - denominator * inv; // inverse mod 2**64\\n    inv *= 2 - denominator * inv; // inverse mod 2**128\\n    inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n    // Because the division is now exact we can divide by multiplying\\n    // with the modular inverse of denominator. This will give us the\\n    // correct result modulo 2**256. Since the precoditions guarantee\\n    // that the outcome is less than 2**256, this is the final result.\\n    // We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inv;\\n    return result;\\n  }\\n\\n  /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  function mulDivCeiling(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    result = mulDivFloor(a, b, denominator);\\n    if (mulmod(a, b, denominator) > 0) {\\n      result++;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf1f735e60f748a239d0c687b81473c4282a5c41e14146c85940655e18707fb3d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport './FullMath.sol';\\n\\nuint256 constant TWO_FEE_UNITS = 200_000;\\nuint256 constant TWO_POW_96 = 2**96;\\nuint128 constant MIN_LIQUIDITY = 100000;\\nuint8 constant RES_96 = 96;\\nuint24 constant BPS = 10000;\\nuint24 constant FEE_UNITS = 100000;\\n// it is strictly less than 5% price movement if jumping MAX_TICK_DISTANCE ticks\\nint24 constant MAX_TICK_DISTANCE = 480;\\n// max number of tick travel when inserting if data changes\\nuint256 constant MAX_TICK_TRAVEL = 10;\\n\\n/// @title Contains helper function to add or remove uint128 liquidityDelta to uint128 liquidity\\nlibrary LiqDeltaMath {\\n  function applyLiquidityDelta(\\n    uint128 liquidity,\\n    uint128 liquidityDelta,\\n    bool isAddLiquidity\\n  ) internal pure returns (uint128) {\\n    return isAddLiquidity ? liquidity + liquidityDelta : liquidity - liquidityDelta;\\n  }\\n}\",\"keccak256\":\"0x6d1ba28cc17b2e163601ce9d29c01f861c29a15bc52f9bb31fe17233b25db5e0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/lib/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n  /// @notice Cast a uint256 to uint32, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint32\\n  function toUint32(uint256 y) internal pure returns (uint32 z) {\\n    require((z = uint32(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint128 to a int128, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt128(uint128 y) internal pure returns (int128 z) {\\n    require(y < 2**127);\\n    z = int128(y);\\n  }\\n\\n  /// @notice Cast a uint256 to a uint128, revert on overflow\\n  /// @param y the uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint128\\n  function toUint128(uint256 y) internal pure returns (uint128 z) {\\n    require((z = uint128(y)) == y);\\n  }\\n\\n  /// @notice Cast a int128 to a uint128 and reverses the sign.\\n  /// @param y The int128 to be casted\\n  /// @return z = -y, now type uint128\\n  function revToUint128(int128 y) internal pure returns (uint128 z) {\\n      return type(uint128).max - uint128(y) + 1;\\n  }\\n\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\n    require((z = uint160(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255);\\n    z = int256(y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256 and reverses the sign, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z = -y, now type int256\\n  function revToInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255);\\n    z = -int256(y);\\n  }\\n\\n  /// @notice Cast a int256 to a uint256 and reverses the sign.\\n  /// @param y The int256 to be casted\\n  /// @return z = -y, now type uint256\\n  function revToUint256(int256 y) internal pure returns (uint256 z) {\\n      return type(uint256).max - uint256(y) + 1;\\n  }\\n}\\n\",\"keccak256\":\"0x4c2819a85bfd8f04edae9e1dbd5fc505cd931bb7a4957636cb2d2493f068b252\",\"license\":\"GPL-2.0-or-later\"},\"contracts/KyberQuoter/lib/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\nimport '../lib/Math.sol';\\nimport './SafeCast.sol';\\n\\n\\nlibrary QuadMath {\\n  // our equation is ax^2 - 2bx + c = 0, where a, b and c > 0\\n  // the qudratic formula to obtain the smaller root is (2b - sqrt((2*b)^2 - 4ac)) / 2a\\n  // which can be simplified to (b - sqrt(b^2 - ac)) / a\\n  function getSmallerRootOfQuadEqn(\\n    uint256 a,\\n    uint256 b,\\n    uint256 c\\n  ) internal pure returns (uint256 smallerRoot) {\\n    smallerRoot = (b - sqrt(b * b - a * c)) / a;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function sqrt(uint256 y) internal pure returns (uint256 z) {\\n      if (y > 3) {\\n        z = y;\\n        uint256 x = y / 2 + 1;\\n        while (x < z) {\\n          z = x;\\n          x = (y / x + x) / 2;\\n        }\\n      } else if (y != 0) {\\n        z = 1;\\n      }\\n    }\\n}\\n\\n\\n/// @title Contains helper functions for swaps\\nlibrary SwapMath {\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n\\n  /// @dev Computes the actual swap input / output amounts to be deducted or added,\\n  /// the swap fee to be collected and the resulting sqrtP.\\n  /// @notice nextSqrtP should not exceed targetSqrtP.\\n  /// @param liquidity active base liquidity + reinvest liquidity\\n  /// @param currentSqrtP current sqrt price\\n  /// @param targetSqrtP sqrt price limit the new sqrt price can take\\n  /// @param feeInFeeUnits swap fee in basis points\\n  /// @param specifiedAmount the amount remaining to be used for the swap\\n  /// @param isExactInput true if specifiedAmount refers to input amount, false if specifiedAmount refers to output amount\\n  /// @param isToken0 true if specifiedAmount is in token0, false if specifiedAmount is in token1\\n  /// @return usedAmount actual amount to be used for the swap\\n  /// @return returnedAmount output qty to be accumulated if isExactInput = true, input qty if isExactInput = false\\n  /// @return deltaL collected swap fee, to be incremented to reinvest liquidity\\n  /// @return nextSqrtP the new sqrt price after the computed swap step\\n  function computeSwapStep(\\n    uint256 liquidity,\\n    uint160 currentSqrtP,\\n    uint160 targetSqrtP,\\n    uint256 feeInFeeUnits,\\n    int256 specifiedAmount,\\n    bool isExactInput,\\n    bool isToken0\\n  )\\n    internal\\n    pure\\n    returns (\\n      int256 usedAmount,\\n      int256 returnedAmount,\\n      uint256 deltaL,\\n      uint160 nextSqrtP\\n    )\\n  {\\n    // in the event currentSqrtP == targetSqrtP because of tick movements, return\\n    // eg. swapped up tick where specified price limit is on an initialised tick\\n    // then swapping down tick will cause next tick to be the same as the current tick\\n    if (currentSqrtP == targetSqrtP) return (0, 0, 0, currentSqrtP);\\n    usedAmount = calcReachAmount(\\n      liquidity,\\n      currentSqrtP,\\n      targetSqrtP,\\n      feeInFeeUnits,\\n      isExactInput,\\n      isToken0\\n    );\\n\\n    if (\\n      (isExactInput && usedAmount > specifiedAmount) ||\\n      (!isExactInput && usedAmount <= specifiedAmount)\\n    ) {\\n      usedAmount = specifiedAmount;\\n    } else {\\n      nextSqrtP = targetSqrtP;\\n    }\\n\\n    uint256 absDelta = usedAmount >= 0 ? uint256(usedAmount) : usedAmount.revToUint256();\\n    if (nextSqrtP == 0) {\\n      deltaL = estimateIncrementalLiquidity(\\n        absDelta,\\n        liquidity,\\n        currentSqrtP,\\n        feeInFeeUnits,\\n        isExactInput,\\n        isToken0\\n      );\\n      nextSqrtP = calcFinalPrice(absDelta, liquidity, deltaL, currentSqrtP, isExactInput, isToken0)\\n      .toUint160();\\n    } else {\\n      deltaL = calcIncrementalLiquidity(\\n        absDelta,\\n        liquidity,\\n        currentSqrtP,\\n        nextSqrtP,\\n        isExactInput,\\n        isToken0\\n      );\\n    }\\n    returnedAmount = calcReturnedAmount(\\n      liquidity,\\n      currentSqrtP,\\n      nextSqrtP,\\n      deltaL,\\n      isExactInput,\\n      isToken0\\n    );\\n  }\\n\\n  /// @dev calculates the amount needed to reach targetSqrtP from currentSqrtP\\n  /// @dev we cast currentSqrtP and targetSqrtP to uint256 as they are multiplied by TWO_FEE_UNITS or feeInFeeUnits\\n  function calcReachAmount(\\n    uint256 liquidity,\\n    uint256 currentSqrtP,\\n    uint256 targetSqrtP,\\n    uint256 feeInFeeUnits,\\n    bool isExactInput,\\n    bool isToken0\\n  ) internal pure returns (int256 reachAmount) {\\n    uint256 absPriceDiff;\\n    absPriceDiff = (currentSqrtP >= targetSqrtP)\\n        ? (currentSqrtP - targetSqrtP)\\n        : (targetSqrtP - currentSqrtP);\\n    if (isExactInput) {\\n      // we round down so that we avoid taking giving away too much for the specified input\\n      // ie. require less input qty to move ticks\\n      if (isToken0) {\\n        // numerator = 2 * liquidity * absPriceDiff\\n        // denominator = currentSqrtP * (2 * targetSqrtP - currentSqrtP * feeInFeeUnits / FEE_UNITS)\\n        // overflow should not happen because the absPriceDiff is capped to ~5%\\n        uint256 denominator = TWO_FEE_UNITS * targetSqrtP - feeInFeeUnits * currentSqrtP;\\n        uint256 numerator = FullMath.mulDivFloor(\\n          liquidity,\\n          TWO_FEE_UNITS * absPriceDiff,\\n          denominator\\n        );\\n        reachAmount = FullMath.mulDivFloor(numerator, TWO_POW_96, currentSqrtP).toInt256();\\n      } else {\\n        // numerator = 2 * liquidity * absPriceDiff * currentSqrtP\\n        // denominator = 2 * currentSqrtP - targetSqrtP * feeInFeeUnits / FEE_UNITS\\n        // overflow should not happen because the absPriceDiff is capped to ~5%\\n        uint256 denominator = TWO_FEE_UNITS * currentSqrtP - feeInFeeUnits * targetSqrtP;\\n        uint256 numerator = FullMath.mulDivFloor(\\n          liquidity,\\n          TWO_FEE_UNITS * absPriceDiff,\\n          denominator\\n        );\\n        reachAmount = FullMath.mulDivFloor(numerator, currentSqrtP, TWO_POW_96).toInt256();\\n      }\\n    } else {\\n      // we will perform negation as the last step\\n      // we round down so that we require less output qty to move ticks\\n      if (isToken0) {\\n        // numerator: (liquidity)(absPriceDiff)(2 * currentSqrtP - deltaL * (currentSqrtP + targetSqrtP))\\n        // denominator: (currentSqrtP * targetSqrtP) * (2 * currentSqrtP - deltaL * targetSqrtP)\\n        // overflow should not happen because the absPriceDiff is capped to ~5%\\n        uint256 denominator = TWO_FEE_UNITS * currentSqrtP - feeInFeeUnits * targetSqrtP;\\n        uint256 numerator = denominator - feeInFeeUnits * currentSqrtP;\\n        numerator = FullMath.mulDivFloor(liquidity << RES_96, numerator, denominator);\\n        reachAmount = (FullMath.mulDivFloor(numerator, absPriceDiff, currentSqrtP) / targetSqrtP)\\n        .revToInt256();\\n      } else {\\n        // numerator: liquidity * absPriceDiff * (TWO_FEE_UNITS * targetSqrtP - feeInFeeUnits * (targetSqrtP + currentSqrtP))\\n        // denominator: (TWO_FEE_UNITS * targetSqrtP - feeInFeeUnits * currentSqrtP)\\n        // overflow should not happen because the absPriceDiff is capped to ~5%\\n        uint256 denominator = TWO_FEE_UNITS * targetSqrtP - feeInFeeUnits * currentSqrtP;\\n        uint256 numerator = denominator - feeInFeeUnits * targetSqrtP;\\n        numerator = FullMath.mulDivFloor(liquidity, numerator, denominator);\\n        reachAmount = FullMath.mulDivFloor(numerator, absPriceDiff, TWO_POW_96).revToInt256();\\n      }\\n    }\\n  }\\n\\n  /// @dev estimates deltaL, the swap fee to be collected based on amount specified\\n  /// for the final swap step to be performed,\\n  /// where the next (temporary) tick will not be crossed\\n  function estimateIncrementalLiquidity(\\n    uint256 absDelta,\\n    uint256 liquidity,\\n    uint160 currentSqrtP,\\n    uint256 feeInFeeUnits,\\n    bool isExactInput,\\n    bool isToken0\\n  ) internal pure returns (uint256 deltaL) {\\n    if (isExactInput) {\\n      if (isToken0) {\\n        // deltaL = feeInFeeUnits * absDelta * currentSqrtP / 2\\n        deltaL = FullMath.mulDivFloor(\\n          currentSqrtP,\\n          absDelta * feeInFeeUnits,\\n          TWO_FEE_UNITS << RES_96\\n        );\\n      } else {\\n        // deltaL = feeInFeeUnits * absDelta * / (currentSqrtP * 2)\\n        // Because nextSqrtP = (liquidity + absDelta / currentSqrtP) * currentSqrtP / (liquidity + deltaL)\\n        // so we round up deltaL, to round down nextSqrtP\\n        deltaL = FullMath.mulDivFloor(\\n          TWO_POW_96,\\n          absDelta * feeInFeeUnits,\\n          TWO_FEE_UNITS * currentSqrtP\\n        );\\n      }\\n    } else {\\n      // obtain the smaller root of the quadratic equation\\n      // ax^2 - 2bx + c = 0 such that b > 0, and x denotes deltaL\\n      uint256 a = feeInFeeUnits;\\n      uint256 b = (FEE_UNITS - feeInFeeUnits) * liquidity;\\n      uint256 c = feeInFeeUnits * liquidity * absDelta;\\n      if (isToken0) {\\n        // a = feeInFeeUnits\\n        // b = (FEE_UNITS - feeInFeeUnits) * liquidity - FEE_UNITS * absDelta * currentSqrtP\\n        // c = feeInFeeUnits * liquidity * absDelta * currentSqrtP\\n        b -= FullMath.mulDivFloor(FEE_UNITS * absDelta, currentSqrtP, TWO_POW_96);\\n        c = FullMath.mulDivFloor(c, currentSqrtP, TWO_POW_96);\\n      } else {\\n        // a = feeInFeeUnits\\n        // b = (FEE_UNITS - feeInFeeUnits) * liquidity - FEE_UNITS * absDelta / currentSqrtP\\n        // c = liquidity * feeInFeeUnits * absDelta / currentSqrtP\\n        b -= FullMath.mulDivFloor(FEE_UNITS * absDelta, TWO_POW_96, currentSqrtP);\\n        c = FullMath.mulDivFloor(c, TWO_POW_96, currentSqrtP);\\n      }\\n      deltaL = QuadMath.getSmallerRootOfQuadEqn(a, b, c);\\n    }\\n  }\\n\\n  /// @dev calculates deltaL, the swap fee to be collected for an intermediate swap step,\\n  /// where the next (temporary) tick will be crossed\\n  function calcIncrementalLiquidity(\\n    uint256 absDelta,\\n    uint256 liquidity,\\n    uint160 currentSqrtP,\\n    uint160 nextSqrtP,\\n    bool isExactInput,\\n    bool isToken0\\n  ) internal pure returns (uint256 deltaL) {\\n    if (isToken0) {\\n      // deltaL = nextSqrtP * (liquidity / currentSqrtP +/- absDelta)) - liquidity\\n      // needs to be minimum\\n      uint256 tmp1 = FullMath.mulDivFloor(liquidity, TWO_POW_96, currentSqrtP);\\n      uint256 tmp2 = isExactInput ? tmp1 + absDelta : tmp1 - absDelta;\\n      uint256 tmp3 = FullMath.mulDivFloor(nextSqrtP, tmp2, TWO_POW_96);\\n      // in edge cases where liquidity or absDelta is small\\n      // liquidity might be greater than nextSqrtP * ((liquidity / currentSqrtP) +/- absDelta))\\n      // due to rounding\\n      deltaL = (tmp3 > liquidity) ? tmp3 - liquidity : 0;\\n    } else {\\n      // deltaL = (liquidity * currentSqrtP +/- absDelta) / nextSqrtP - liquidity\\n      // needs to be minimum\\n      uint256 tmp1 = FullMath.mulDivFloor(liquidity, currentSqrtP, TWO_POW_96);\\n      uint256 tmp2 = isExactInput ? tmp1 + absDelta : tmp1 - absDelta;\\n      uint256 tmp3 = FullMath.mulDivFloor(tmp2, TWO_POW_96, nextSqrtP);\\n      // in edge cases where liquidity or absDelta is small\\n      // liquidity might be greater than nextSqrtP * ((liquidity / currentSqrtP) +/- absDelta))\\n      // due to rounding\\n      deltaL = (tmp3 > liquidity) ? tmp3 - liquidity : 0;\\n    }\\n  }\\n\\n  /// @dev calculates the sqrt price of the final swap step\\n  /// where the next (temporary) tick will not be crossed\\n  function calcFinalPrice(\\n    uint256 absDelta,\\n    uint256 liquidity,\\n    uint256 deltaL,\\n    uint160 currentSqrtP,\\n    bool isExactInput,\\n    bool isToken0\\n  ) internal pure returns (uint256) {\\n    if (isToken0) {\\n      // if isExactInput: swap 0 -> 1, sqrtP decreases, we round up\\n      // else swap: 1 -> 0, sqrtP increases, we round down\\n      uint256 tmp = FullMath.mulDivFloor(absDelta, currentSqrtP, TWO_POW_96);\\n      if (isExactInput) {\\n        return FullMath.mulDivCeiling(liquidity + deltaL, currentSqrtP, liquidity + tmp);\\n      } else {\\n        return FullMath.mulDivFloor(liquidity + deltaL, currentSqrtP, liquidity - tmp);\\n      }\\n    } else {\\n      // if isExactInput: swap 1 -> 0, sqrtP increases, we round down\\n      // else swap: 0 -> 1, sqrtP decreases, we round up\\n      if (isExactInput) {\\n        uint256 tmp = FullMath.mulDivFloor(absDelta, TWO_POW_96, currentSqrtP);\\n        return FullMath.mulDivFloor(liquidity + tmp, currentSqrtP, liquidity + deltaL);\\n      } else {\\n        uint256 tmp = FullMath.mulDivFloor(absDelta, TWO_POW_96, currentSqrtP);\\n        return FullMath.mulDivCeiling(liquidity - tmp, currentSqrtP, liquidity + deltaL);\\n      }\\n    }\\n  }\\n\\n  /// @dev calculates returned output | input tokens in exchange for specified amount\\n  /// @dev round down when calculating returned output (isExactInput) so we avoid sending too much\\n  /// @dev round up when calculating returned input (!isExactInput) so we get desired output amount\\n  function calcReturnedAmount(\\n    uint256 liquidity,\\n    uint160 currentSqrtP,\\n    uint160 nextSqrtP,\\n    uint256 deltaL,\\n    bool isExactInput,\\n    bool isToken0\\n  ) internal pure returns (int256 returnedAmount) {\\n    if (isToken0) {\\n      if (isExactInput) {\\n        // minimise actual output (<0, make less negative) so we avoid sending too much\\n        // returnedAmount = deltaL * nextSqrtP - liquidity * (currentSqrtP - nextSqrtP)\\n        returnedAmount =\\n          FullMath.mulDivCeiling(deltaL, nextSqrtP, TWO_POW_96).toInt256() +\\n          FullMath.mulDivFloor(liquidity, currentSqrtP - nextSqrtP, TWO_POW_96).revToInt256();\\n      } else {\\n        // maximise actual input (>0) so we get desired output amount\\n        // returnedAmount = deltaL * nextSqrtP + liquidity * (nextSqrtP - currentSqrtP)\\n        returnedAmount =\\n          FullMath.mulDivCeiling(deltaL, nextSqrtP, TWO_POW_96).toInt256() +\\n          FullMath.mulDivCeiling(liquidity, nextSqrtP - currentSqrtP, TWO_POW_96).toInt256();\\n      }\\n    } else {\\n      // returnedAmount = (liquidity + deltaL)/nextSqrtP - (liquidity)/currentSqrtP\\n      // if exactInput, minimise actual output (<0, make less negative) so we avoid sending too much\\n      // if exactOutput, maximise actual input (>0) so we get desired output amount\\n      returnedAmount =\\n        FullMath.mulDivCeiling(liquidity + deltaL, TWO_POW_96, nextSqrtP).toInt256() +\\n        FullMath.mulDivFloor(liquidity, TWO_POW_96, currentSqrtP).revToInt256();\\n    }\\n\\n    if (isExactInput && returnedAmount == 1) {\\n      // rounding make returnedAmount == 1\\n      returnedAmount = 0;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0b93e2f8a24a063a677b27783ddefcf276276bba9ac01bccc6dac0c91be91f48\",\"license\":\"MIT\"},\"contracts/UniV3Quoter/interfaces/IUniswapV3StaticQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\ninterface IUniswapV3StaticQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        view\\n        returns (uint256 amountOut);\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        view\\n        returns (uint256 amountOut);\\n}\",\"keccak256\":\"0x6b8609ab43d75ba9ab8796c2dd55b120f4f6c8bbc630da5b3dd90553f12eb25e\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620026e9380380620026e983398101604081905262000034916200004a565b60601b6001600160601b0319166080526200007a565b6000602082840312156200005c578081fd5b81516001600160a01b038116811462000073578182fd5b9392505050565b60805160601c612651620000986000398061147252506126516000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806390405d3614610046578063c6a5026a14610070578063cdca175314610090575b600080fd5b6100596100543660046123e9565b6100a3565b6040516100679291906125ad565b60405180910390f35b61008361007e3660046124eb565b61047c565b60405161006791906125f2565b61008361009e36600461243f565b610598565b6000808361011257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f0000604482015290519081900360640190fd5b61011a61236e565b84815285151560c082018190526000861360e08301819052141561013e888261066d565b600290810b810b608088015290810b900b606086015273ffffffffffffffffffffffffffffffffffffffff16604085018190526fffffffffffffffffffffffffffffffff91821661012086015291166101008401526101a090829087906107b4565b60008873ffffffffffffffffffffffffffffffffffffffff1663c79a590e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101e857600080fd5b505afa1580156101fc573d6000803e3d6000fd5b505050506040513d602081101561021257600080fd5b505190505b82511580159061025757508573ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff1614155b1561044c57600061027184606001518560800151856108ed565b905061027c8161095c565b73ffffffffffffffffffffffffffffffffffffffff90811660a086018190526040860151918916811185151514156102b15750875b60008060006102f88961012001518a6101000151016fffffffffffffffffffffffffffffffff168a60400151868a62ffffff168d600001518e60e001518f60c00151610cef565b73ffffffffffffffffffffffffffffffffffffffff1660408d01528b518390038c5260208c018051830190529194509250905061033481610e3b565b6101208a018051919091016fffffffffffffffffffffffffffffffff16905250505060a0860151604087015173ffffffffffffffffffffffffffffffffffffffff91821691161490506103d9578073ffffffffffffffffffffffffffffffffffffffff16856040015173ffffffffffffffffffffffffffffffffffffffff16146103d2576103c58560400151610e5a565b600290810b900b60608601525b505061044c565b836103e757600182036103e9565b815b600290810b810b6060870152608086015183820b910b1461040b575050610217565b6104208b866080015187610100015187611226565b600290810b900b60808701526fffffffffffffffffffffffffffffffff16610100860152506102179050565b8761045f5760208301518351880361046c565b8260000151870383602001515b909a909950975050505050505050565b60208101518151606083015160009273ffffffffffffffffffffffffffffffffffffffff808216908416109284926104b49290611432565b905073ffffffffffffffffffffffffffffffffffffffff811661050c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610503906125bb565b60405180910390fd5b60008061057583856105218960400151611503565b60808a015173ffffffffffffffffffffffffffffffffffffffff161561054b578960800151610054565b8761056a5773fffd8963efd1fc6a506488495d951d5263988d25610054565b6401000276a46100a3565b9150915083610587578160000361058c565b806000035b9450505050505b919050565b6000805b60008060006105aa87611535565b92509250925060006106296040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018462ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525061047c565b9650506001909301928561063c88611566565b156106515761064a8861156e565b975061065e565b8695505050505050610667565b5050505061059c565b92915050565b60008060008060008673ffffffffffffffffffffffffffffffffffffffff1663217ac2376040518163ffffffff1660e01b815260040160806040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d60808110156106e557600080fd5b508051602082015160409283015183517fab612f2b0000000000000000000000000000000000000000000000000000000081529351929650909450925073ffffffffffffffffffffffffffffffffffffffff89169163ab612f2b916004808301926060929190829003018186803b15801561075f57600080fd5b505afa158015610773573d6000803e3d6000fd5b505050506040513d606081101561078957600080fd5b508051602090910151909550935085156107aa576107a787826115a3565b90505b9295509295909350565b600083610815578173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1610801561081057506401000276a373ffffffffffffffffffffffffffffffffffffffff8416115b610879565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16118015610879575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff8416105b9050806108e757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7371727450726963654c696d6974206f7574206f6620626f756e647300000000604482015290519081900360640190fd5b50505050565b818180156109045750836101e00160020b8160020b135b1561091457506101e08301610955565b8115801561092b57506101e0840360020b8160020b125b1561095557507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe2083015b9392505050565b60008060008360020b12610973578260020b61097b565b8260020b6000035b9050620d89e88111156109ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018216610a1057700100000000000000000000000000000000610a22565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610a56576ffff97272373d413259a46990580e213a0260801c5b6004821615610a75576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610a94576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610ab3576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610ad2576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610af1576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610b10576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610b30576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610b50576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b70576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610b90576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610bb0576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610bd0576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610bf0576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610c10576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610c31576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610c51576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c70576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610c8d576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610cc657807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610cc257fe5b0490505b640100000000810615610cda576001610cdd565b60005b60ff16602082901c0192505050919050565b6000806000808873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415610d3a57506000925082915081905088610e2d565b610d748b8b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168b8a8a61162e565b9350858015610d8257508684135b80610d96575085158015610d965750868413155b15610da357869350610da6565b50875b600080851215610dbe57610db985611773565b610dc0565b845b905073ffffffffffffffffffffffffffffffffffffffff8216610e0a57610deb818d8d8c8b8b61177a565b9250610e03610dfe828e868f8c8c6118fc565b611a42565b9150610e1b565b610e18818d8d858b8b611a65565b92505b610e298c8c84868b8b611b99565b9350505b975097509750979350505050565b806fffffffffffffffffffffffffffffffff8116811461059357600080fd5b60006401000276a373ffffffffffffffffffffffffffffffffffffffff831610801590610eb0575073fffd8963efd1fc6a506488495d951d5263988d2673ffffffffffffffffffffffffffffffffffffffff8316105b610f1b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f5200000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b77ffffffffffffffffffffffffffffffffffffffff00000000602083901b166fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c97908811961790941790921717909117171760808110610fc557607f810383901c9150610fcf565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581027ffffffffffffffffffffffffffffffffffd709b7e5480fba5a50fed5e62ffc5568101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b14611217578873ffffffffffffffffffffffffffffffffffffffff166111ee8261095c565b73ffffffffffffffffffffffffffffffffffffffff1611156112105781611212565b805b611219565b815b9998505050505050505050565b60008060008673ffffffffffffffffffffffffffffffffffffffff1663f30dba93876040518263ffffffff1660e01b8152600401808260020b815260200191505060806040518083038186803b15801561127f57600080fd5b505afa158015611293573d6000803e3d6000fd5b505050506040513d60808110156112a957600080fd5b50602001519050831561135857604080517fc0ac75cf000000000000000000000000000000000000000000000000000000008152600288900b6004820152815173ffffffffffffffffffffffffffffffffffffffff8a169263c0ac75cf9260248082019391829003018186803b15801561132257600080fd5b505afa158015611336573d6000803e3d6000fd5b505050506040513d604081101561134c57600080fd5b506020015191506113f6565b604080517fc0ac75cf000000000000000000000000000000000000000000000000000000008152600288900b6004820152815173ffffffffffffffffffffffffffffffffffffffff8a169263c0ac75cf9260248082019391829003018186803b1580156113c457600080fd5b505afa1580156113d8573d6000803e3d6000fd5b505050506040513d60408110156113ee57600080fd5b505191506000035b61142685600083600f0b12156114175761141283600f0b611d07565b611419565b825b600084600f0b1215611d1f565b92505094509492505050565b6040517f1698ee8200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631698ee82906114ab90879087908790600401612578565b60206040518083038186803b1580156114c357600080fd5b505afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb91906123cd565b949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000821061153157600080fd5b5090565b600080806115438482611d34565b9250611550846014611e34565b905061155d846017611d34565b91509193909250565b516042111590565b80516060906106679083906017907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe901611f24565b60008273ffffffffffffffffffffffffffffffffffffffff1663c0ac75cf836040518263ffffffff1660e01b8152600401808260020b8152602001915050604080518083038186803b1580156115f857600080fd5b505afa15801561160c573d6000803e3d6000fd5b505050506040513d604081101561162257600080fd5b50602001519392505050565b6000808587101561164157868603611645565b8587035b905083156116e557821561169e5760008786028762030d400203905060006116738a8462030d40028461210b565b9050611695611690826c010000000000000000000000008c61210b565b611503565b935050506116e0565b60008686028862030d400203905060006116be8a8462030d40028461210b565b90506116db611690828b6c0100000000000000000000000061210b565b935050505b611768565b82156117275784860262030d40880203878602810361170960608b901b828461210b565b90506116db8861171a83868d61210b565b8161172157fe5b04612298565b84870262030d4087020386860281036117418a828461210b565b905061176361175e82856c0100000000000000000000000061210b565b612298565b935050505b509695505050505050565b1960010190565b600082156117fe5781156117c1576117ba73ffffffffffffffffffffffffffffffffffffffff86168886026e030d4000000000000000000000000061210b565b90506117f9565b6117f66c010000000000000000000000008589028773ffffffffffffffffffffffffffffffffffffffff1662030d400261210b565b90505b6118f2565b83620186a081900387028782028902841561187f57611846620186a08b0273ffffffffffffffffffffffffffffffffffffffff8a166c0100000000000000000000000061210b565b82039150611878818973ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000061210b565b90506118e7565b6118b2620186a08b026c0100000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8b1661210b565b820391506118e4816c010000000000000000000000008a73ffffffffffffffffffffffffffffffffffffffff1661210b565b90505b6117638383836122cd565b9695505050505050565b6000811561198e576000611934888673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000061210b565b90508315611969576119618688018673ffffffffffffffffffffffffffffffffffffffff16838a016122f1565b9150506118f2565b6119618688018673ffffffffffffffffffffffffffffffffffffffff16838a0361210b565b82156119eb5760006119c4886c010000000000000000000000008773ffffffffffffffffffffffffffffffffffffffff1661210b565b90506119618188018673ffffffffffffffffffffffffffffffffffffffff16888a0161210b565b6000611a1b886c010000000000000000000000008773ffffffffffffffffffffffffffffffffffffffff1661210b565b90506119618188038673ffffffffffffffffffffffffffffffffffffffff16888a016122f1565b8073ffffffffffffffffffffffffffffffffffffffff8116811461059357600080fd5b60008115611b02576000611a9d876c010000000000000000000000008873ffffffffffffffffffffffffffffffffffffffff1661210b565b9050600084611aae57888203611ab2565b8882015b90506000611ae48773ffffffffffffffffffffffffffffffffffffffff16836c0100000000000000000000000061210b565b9050888111611af4576000611af8565b8881035b93505050506118f2565b6000611b32878773ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000061210b565b9050600084611b4357888203611b47565b8882015b90506000611b79826c010000000000000000000000008973ffffffffffffffffffffffffffffffffffffffff1661210b565b9050888111611b89576000611763565b9790970398975050505050505050565b60008115611c80578215611c1357611bda61175e8887890373ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000061210b565b611c0b611690868873ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000006122f1565b019050611c7b565b611c466116908888880373ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000006122f1565b611c77611690868873ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000006122f1565b0190505b611ce8565b611cb161175e886c010000000000000000000000008973ffffffffffffffffffffffffffffffffffffffff1661210b565b611ce4611690868a016c010000000000000000000000008973ffffffffffffffffffffffffffffffffffffffff166122f1565b0190505b828015611cf55750806001145b156118f2575060009695505050505050565b6fffffffffffffffffffffffffffffffff0360010190565b600081611d2e578284036114fb565b50500190565b600081826014011015611da857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015611e1b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015611ea857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015611f1b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015611f9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b82828401101561200957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561207b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561209a5760405191506000825260208201604052612102565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156120d35780518352602092830192016120bb565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709868602925082811090839003039050806121c157600084116121b657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f302064656e6f6d00000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b508290049050610955565b80841161222f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f64656e6f6d203c3d2070726f6431000000000000000000000000000000000000604482015290519081900360640190fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60007f800000000000000000000000000000000000000000000000000000000000000082106122c657600080fd5b5060000390565b6000836122df8386028586020361231d565b8403816122e857fe5b04949350505050565b60006122fe84848461210b565b90506000828061230a57fe5b8486091115610955576001019392505050565b60006003821115612360575080600160028204015b8181101561235a5780915060028182858161234957fe5b04018161235257fe5b049050612332565b50610593565b811561059357506001919050565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b80356105938161261f565b6000602082840312156123de578081fd5b81516109558161261f565b600080600080608085870312156123fe578283fd5b84356124098161261f565b93506020850135801515811461241d578384fd5b92506040850135915060608501356124348161261f565b939692955090935050565b60008060408385031215612451578182fd5b823567ffffffffffffffff80821115612468578384fd5b818501915085601f83011261247b578384fd5b813560208282111561248957fe5b6124b9817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116016125fb565b925081835287818386010111156124ce578586fd5b818185018285013790820181019490945295939092013593505050565b600060a082840312156124fc578081fd5b60405160a0810181811067ffffffffffffffff8211171561251957fe5b60405282356125278161261f565b815260208301356125378161261f565b602082015260408381013590820152606083013562ffffff8116811461255b578283fd5b606082015261256c608084016123c2565b60808201529392505050565b73ffffffffffffffffffffffffffffffffffffffff938416815291909216602082015262ffffff909116604082015260600190565b918252602082015260400190565b6020808252600e908201527f506f6f6c206e6f7420666f756e64000000000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561261757fe5b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461264157600080fd5b5056fea164736f6c6343000706000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "quoteExactInput(bytes,uint256)": {
        "params": {
          "amountIn": "The amount of the first token to swap",
          "path": "The path of the swap, i.e. each token pair and the pool fee"
        },
        "returns": {
          "amountOut": "The amount of the last token that would be received"
        }
      },
      "quoteExactInputSingle((address,address,uint256,uint24,uint160))": {
        "params": {
          "params": "The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"
        },
        "returns": {
          "amountOut": "The amount of `tokenOut` that would be received"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "quoteExactInput(bytes,uint256)": {
        "notice": "Returns the amount out received for a given exact input swap without executing the swap"
      },
      "quoteExactInputSingle((address,address,uint256,uint24,uint160))": {
        "notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}